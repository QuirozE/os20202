From 6024f8ae5535681f6e6749297422375bd9f15439 Mon Sep 17 00:00:00 2001
From: equiroz <equiroz@ciencias.unam.mx>
Date: Sun, 1 Mar 2020 16:23:31 -0600
Subject: [PATCH 2/2] Adding extra activity

---
 lab/pintos/src/threads/thread.c | 31 +++++++++++++++----------------
 1 file changed, 15 insertions(+), 16 deletions(-)

diff --git a/lab/pintos/src/threads/thread.c b/lab/pintos/src/threads/thread.c
index 29b5d79..362b486 100644
--- a/lab/pintos/src/threads/thread.c
+++ b/lab/pintos/src/threads/thread.c
@@ -22,7 +22,8 @@
 
 /* List of processes in THREAD_READY state, that is, processes
    that are ready to run but not actually running. */
-static struct list ready_list;
+/* EXTRA2: generating one list per priority*/
+static struct list ready_list[65];
 
 /* List of all processes.  Processes are added to this list
    when they are first scheduled and removed when they exit. */
@@ -90,7 +91,10 @@ thread_init (void)
   ASSERT (intr_get_level () == INTR_OFF);
 
   lock_init (&tid_lock);
-  list_init (&ready_list);
+  /*EXTRA2: initializing all the priority lists*/
+  for(int i = 0; i < 66; i++) {
+    list_init (&(ready_list[i]));
+  }
   list_init (&all_list);
 
   /* Set up a thread structure for the running thread. */
@@ -100,14 +104,6 @@ thread_init (void)
   initial_thread->tid = allocate_tid ();
 }
 
-/* LAB2: adding priority comparaison function*/
-bool
-thread_priority_compare(const struct list_elem* e1, const struct list_elem* e2, void* aux UNUSED){
-  struct thread* t1 = list_entry(e1, struct thread, elem);
-  struct thread* t2 = list_entry(e2, struct thread, elem);
-
-  return t1->priority > t2 -> priority;
-}
 
 /* Starts preemptive thread scheduling by enabling interrupts.
    Also creates the idle thread. */
@@ -259,7 +255,8 @@ thread_unblock (struct thread *t)
   ASSERT (t->status == THREAD_BLOCKED);
   
   /* LAB2: Inserting processes accodring to priority.*/
-  list_insert_ordered(&ready_list, &t->elem, thread_priority_compare, NULL);
+  /*EXTRA2: Inserting in the corresponding priority list*/
+  list_push_back(&(ready_list[t->priority]), &(t->elem));
   t->status = THREAD_READY;
   intr_set_level (old_level);
 }
@@ -331,7 +328,8 @@ thread_yield (void)
   old_level = intr_disable ();
   if (cur != idle_thread)
     /*LAB2: inserting processes according to priority*/
-    list_insert_ordered(&ready_list, &cur->elem,thread_priority_compare,NULL);
+    /*EXTRA2: insert in the corresponding priority list*/
+    list_push_back(&(ready_list[cur->priority]), &(cur->elem));
   cur->status = THREAD_READY;
   schedule ();
   intr_set_level (old_level);
@@ -511,10 +509,11 @@ alloc_frame (struct thread *t, size_t size)
 static struct thread *
 next_thread_to_run (void) 
 {
-  if (list_empty (&ready_list))
-    return idle_thread;
-  else
-    return list_entry (list_pop_front (&ready_list), struct thread, elem);
+  for(int i = 0; i < 65; i++) {
+    if (!list_empty (&(ready_list[i])))
+      return list_entry (list_pop_front (&(ready_list[i])), struct thread, elem);
+  }
+  return idle_thread;
 }
 
 /* Completes a thread switch by activating the new thread's page
-- 
2.25.1

